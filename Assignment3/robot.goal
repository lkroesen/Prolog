init module {
	knowledge {
		% A room is a place with exactly one neighbour, i.e., there is only one way to get to and from that place.
		room(PlaceID) :- zone(_,PlaceID,_,_,Neighbours), length(Neighbours,1).
                
                % Exercice 2.2, element finder
        nthOut(In, Out, Nmr) :- nthFind(In, Out, Nmr, 0).
 		nthFind([X|_], X, NeededNmr, NeededNmr).
 		nthFind([_|Tail], Out, NeededNmr, Count) :- Count < NeededNmr, NewNmr is Count + 1, nthFind(Tail, Out, NeededNmr, NewNmr).
		
		% Exercise 2.2: insert a definition of the predicate "nextColorInSeq(Color)".
		nextColorInSeq(Color) :- sequenceIndex(Integer), sequence(Sequence), nthOut(Sequence,Color,Integer).
		% Exercise 2.5 + 2.6: (optional) if needed, insert additional knowledge here.	
	}
	program {
		% Store map information, i.e., navigation points in the agent's belief base.
		forall bel( percept(zone(ID, Name, X, Y, Neighbours)) ) do insert( zone(ID, Name, X, Y, Neighbours) ).
		if bel( percept(sequence(Color)) ) then insert( sequence(Color)).
		% Record the initial state of movement in belief base.
		if bel( percept(state(State)) ) then insert( state(State) ).
		
		% Adopt initial goals.
		forall bel( room(Place) ) do adopt( in(Place) ).

		% Exercise 2.1a: insert rules for processing percepts that are sent only at the beginning of a session, 
		%  and/or need to be initialized.
		
	}	
	actionspec {
		% The goTo action makes the agent move to a place (location) in the BW4T environment.
		% As long as the agent has not arrived at the place it is going to, it will be in "traveling" mode.
		goTo(Place) {
            pre { not(state(traveling)) }
			post { true }
		}

		% Exercise 2.3a: insert a specification for the goToBlock(Block) action.
		goToBlock(Block){
			pre { blockAtLocation(Block,Color,Place), (not(atBlock(Block))), in(Place) }
			post{ true }
		}
		% Exercise 2.3b: insert a specification for the pickUp action.
		pickUp{
			pre{ at(Place), nextColorInSeq(Color), color(Block,Color) }
			post{(holding(Block), not(atBlock(Block))))}
		}
		% Exercise 2.3c: insert a specification for the putDown action.
		putDown{
			pre{(holding(Block), at('DropZone'))}
			post{ (not(holding(Block))) }
		}
	}
}

main module [exit=nogoals] {
	program {
		%Original goal
		
		% Go to a place if we have not visited it.
		if a-goal( in(Place) ) then goTo(Place).
						
		% If at the place where I am now I see a block that I need, go to that block
		
		% This should work but it DOES NOT
		
		% If I'm at a Block then I want to pick it up
		%if bel(atBlock(Block)) then pickUp.
		
		% Now that I'm holding a block I must return it to the DropZone
		%if bel(holding(Block)) then goTo('DropZone').
		
		% If I'm in the DropZone, and am Holding a block, then I want to put it Down
		%if bel(in('DropZone'), holding(Block)) then putDown.
		
		
		%if a-goal(in(Place)) then goTo(Place).
		%%not(state(traveling)), at(Place), blockAtLocation(Block,_,Place), color(Block,Color), nextColorInSeq(Color))}
		%%if a-goal(holding(Block)), bel(blockAtLocation(Block,_,Room), in(Room)) then goToBlock(Block).
		
		% Exercise 2.5a: insert code for action rules that allows an agent to systematically search for blocks.
		%if bel( visited(Place), blockAtLocation(Block,Color,Place), nextColorInSeq(Color)) then adopt(goTo(Place)).
		
		
		% If you're in a room that has a block of the Color you need then goTo that block.
		%if bel(at(Place), nextColorInSeq(Color), color(Block,Color), not(atBlock(Block)) not(state(travelling))) then goToBlock(Block).
		% Exercise 2.6a: insert code for action rules that makes the agent deliver a block when it 
		%   knows about a block that can be delivered.
		
	}
}

event module {
	program {
		
		% This doesn't work yet, but it works kinda
		if bel(in(Place), nextColorInSeq(Color), color(Block,Color), not(holding(_))) then goToBlock(Block).
		
		% THESE LINES OF CODE WORK DON'T CHANGE
		
		% If the robot is at a block which is the one he needs, then he needs to pick it up
		if bel(atBlock(Block), nextColorInSeq(Color), color(Block,Color)) then pickUp.
		
		% If he's holding a block that he needs then he needs to go to the DropZone
		if bel(holding(Block), nextColorInSeq(Color), blockAtLocation(Block,Color,Place)) then goTo('DropZone').
		
		% If he's holding a block which is the colour we need and he is in the dropzone then he needs to put it down.
		if bel(holding(Block), nextColorInSeq(Color), blockAtLocation(Block,Color,Place), in('DropZone')) then putDown.
		
	    % Update the agent's state of movement.
		forall bel( state(State), percept(state(NewState)) ) do delete( state(State) ) + insert( state(NewState) ).
		
		% Record when we are entering or leaving a room.
		forall bel( percept(in(Place)) ) do insert( in(Place) ).
		forall bel( percept(not(in(Place))) ) do delete( in(Place) ).
		
		%Record when we are at a place.
		if bel( percept (in(Place)) ) then insert(at(Place)).
		if bel( percept (not(in(Place))) ) then delete(at(Place)).
		
		%Record what our current place is (if we are in a place).
		if bel( percept (in(Place)) ) then insert (place(Place)).
		if bel( percept (not(in(Place))) ) then delete (place(Place)).
		
		%Record when we are in a room with a certain block.
		forall bel( percept (atBlock(BlockID)) ) do insert (atBlock(BlockID)).
		forall bel( percept (not(atBlock(BlockID))) ) do delete (atBlock(BlockID)).
		
		%Record which block has which color
		forall bel( percept (color(BlockID, ColorID)) ) do insert (color(BlockID, ColorID)).
		forall bel( percept (not(color(BlockID, ColorID))) ) do delete (color(BlockID, ColorID)).
		
		%Record if the agent is holding a block.
		if bel(percept (holding(BlockID)) ) then insert (holding(BlockID)).
		if bel(percept (not(holding(BlockID))) ) then delete (holding(BlockID)).
		
		%Record which block in the sequence of blocks is needed.
		if bel(percept (sequenceIndex(Integer)) ) then insert (sequenceIndex(Integer)).
		if bel(percept (not(sequenceIndex(Integer))) ) then delete (sequenceIndex(Integer)).
		
		%Record what block is located where.
		forall bel(percept (at(Place)), percept(color(BlockID, ColorID))) do insert (blockAtLocation(BlockID, ColorID, Place)).
		forall bel(percept (not(at(Place))), percept(not(color(BlockID, ColorID))) ) do delete (blockAtLocation(BlockID, ColorID, Place)).
		%To add when holding blocks
		% Exercise 2.1b: insert rules for handling percepts other than "sendonce" percepts.
		
		% Exercise 2.5b: insert code for goal management that allows an agent to systematically search for blocks. (if needed)
		% If we're in a place, then we have visited it
		if bel(in(Place)) then insert (visited(Place)).
		
		% Exercise 2.6b: insert code for goal management that makes the agent deliver a block when it 
		%   knows about a block that can be delivered. (if needed)
		
	}
}
